/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>

  F* version: <unknown>

 */

#ifndef __dst_H
#define __dst_H

#include "eurydice_glue.h"


#if defined(__cplusplus)
extern "C" {
#endif

#define core_panicking_AssertKind_Eq 0
#define core_panicking_AssertKind_Ne 1
#define core_panicking_AssertKind_Match 2

typedef uint8_t core_panicking_AssertKind;

typedef struct dst_T_s
{
  uint32_t foo;
  uint32_t my_data[];
}
dst_T;

/**
A monomorphic instance of Eurydice.arr
with types uint32_t
with const generics
- $3size_t
*/
typedef struct Eurydice_arr_6f_s { uint32_t data[3U]; } Eurydice_arr_6f;

typedef struct dst_T3_s
{
  uint32_t foo;
  Eurydice_arr_6f my_data[];
}
dst_T3;

/**
A monomorphic instance of Eurydice.dst_ref
with types dst_S Eurydice_derefed_slice uint32_t, size_t

*/
typedef struct Eurydice_dst_ref_ed_s
{
  dst_T *ptr;
  size_t meta;
}
Eurydice_dst_ref_ed;

/**
A monomorphic instance of Eurydice.arr
with types uint32_t
with const generics
- $4size_t
*/
typedef struct Eurydice_arr_0d_s { uint32_t data[4U]; } Eurydice_arr_0d;

/**
A monomorphic instance of dst.S
with types Eurydice_arr uint32_t[[$4size_t]]

*/
typedef struct dst_S_64_s
{
  uint32_t foo;
  Eurydice_arr_0d my_data;
}
dst_S_64;

Eurydice_dst_ref_ed dst_alloc(void);

/**
A monomorphic instance of Eurydice.dst_ref
with types dst_S Eurydice_derefed_slice Eurydice_arr uint32_t[[$3size_t]], size_t

*/
typedef struct Eurydice_dst_ref_fd_s
{
  dst_T3 *ptr;
  size_t meta;
}
Eurydice_dst_ref_fd;

/**
A monomorphic instance of Eurydice.arr
with types Eurydice_arr uint32_t[[$3size_t]]
with const generics
- $4size_t
*/
typedef struct Eurydice_arr_58_s { Eurydice_arr_6f data[4U]; } Eurydice_arr_58;

/**
A monomorphic instance of dst.S
with types Eurydice_arr Eurydice_arr uint32_t[[$3size_t]][[$4size_t]]

*/
typedef struct dst_S_9c_s
{
  uint32_t foo;
  Eurydice_arr_58 my_data;
}
dst_S_9c;

Eurydice_dst_ref_fd dst_alloc3(void);

void dst_check_regular_field(Eurydice_dst_ref_ed x);

void dst_check_regular_field_ref(Eurydice_dst_ref_ed x);

/**
A monomorphic instance of Eurydice.dst_ref
with types uint32_t, size_t

*/
typedef struct Eurydice_dst_ref_3c_s
{
  uint32_t *ptr;
  size_t meta;
}
Eurydice_dst_ref_3c;

void dst_check_var_field(Eurydice_dst_ref_ed x);

void dst_check_var_field_ref(Eurydice_dst_ref_ed x);

/**
A monomorphic instance of Eurydice.dst_ref
with types Eurydice_arr uint32_t[[$3size_t]], size_t

*/
typedef struct Eurydice_dst_ref_51_s
{
  Eurydice_arr_6f *ptr;
  size_t meta;
}
Eurydice_dst_ref_51;

void dst_check_var_field_ref3(Eurydice_dst_ref_fd x);

void dst_main3(void);

/**
A monomorphic instance of dst.T2
with types Eurydice_derefed_slice uint32_t

*/
typedef struct dst_T2_be_s
{
  size_t header;
  uint32_t my_data[];
}
dst_T2_be;

/**
A monomorphic instance of Eurydice.dst_ref
with types dst_T2 Eurydice_derefed_slice uint32_t, size_t

*/
typedef struct Eurydice_dst_ref_96_s
{
  dst_T2_be *ptr;
  size_t meta;
}
Eurydice_dst_ref_96;

/**
A monomorphic instance of dst.T2
with types Eurydice_arr uint32_t[[$4size_t]]

*/
typedef struct dst_T2_64_s
{
  size_t header;
  Eurydice_arr_0d my_data;
}
dst_T2_64;

Eurydice_dst_ref_96 dst_mk(void);

void dst_main4(void);

void dst_main(void);

#if defined(__cplusplus)
}
#endif

#define __dst_H_DEFINED
#endif
