/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>

  F* version: <unknown>

 */

#ifndef closure_H
#define closure_H

#include "eurydice_glue.h"


#if defined(__cplusplus)
extern "C" {
#endif

/**
A monomorphic instance of Eurydice.arr
with types size_t
with const generics
- $1size_t
*/
typedef struct Eurydice_arr_e4_s { size_t data[1U]; } Eurydice_arr_e4;

typedef Eurydice_arr_e4 *closure_f_closure;

typedef struct closure_f_closure_closure_s
{
  Eurydice_arr_e4 *fst;
  size_t *snd;
}
closure_f_closure_closure;

/**
This function found in impl {core::ops::function::FnMut<(usize), usize> for closure::f::closure::closure<0, 1>}
*/
size_t closure_f_closure_call_mut_8a(closure_f_closure_closure *_, size_t tupled_args);

/**
This function found in impl {core::ops::function::FnOnce<(usize), usize> for closure::f::closure::closure<0, 1>}
*/
size_t closure_f_closure_call_once_b7(closure_f_closure_closure _, size_t _0);

/**
This function found in impl {core::ops::function::FnMut<(usize), @Array<usize, 1usize>> for closure::f::closure<0>}
*/
Eurydice_arr_e4 closure_f_call_mut_59(Eurydice_arr_e4 **_, size_t tupled_args);

/**
This function found in impl {core::ops::function::FnOnce<(usize), @Array<usize, 1usize>> for closure::f::closure<0>}
*/
Eurydice_arr_e4 closure_f_call_once_71(Eurydice_arr_e4 *_, size_t _0);

/**
A monomorphic instance of Eurydice.arr
with types Eurydice_arr size_t[[$1size_t]]
with const generics
- $1size_t
*/
typedef struct Eurydice_arr_81_s { Eurydice_arr_e4 data[1U]; } Eurydice_arr_81;

Eurydice_arr_81 closure_f(void);

#define core_panicking_AssertKind_Eq 0
#define core_panicking_AssertKind_Ne 1
#define core_panicking_AssertKind_Match 2

typedef uint8_t core_panicking_AssertKind;

void closure_main(void);

#if defined(__cplusplus)
}
#endif

#define closure_H_DEFINED
#endif /* closure_H */
