/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>

  F* version: <unknown>

 */

#ifndef __nested_arrays_H
#define __nested_arrays_H

#include "eurydice_glue.h"


#if defined(__cplusplus)
extern "C" {
#endif

extern size_t core_clone_impls__core__clone__Clone_for_usize__clone(size_t *x0);

#define core_cmp_Ordering_Less -1
#define core_cmp_Ordering_Equal 0
#define core_cmp_Ordering_Greater 1

typedef int8_t core_cmp_Ordering;

extern bool core_cmp_impls__core__cmp__PartialEq_usize__for_usize__eq(size_t *x0, size_t *x1);

#define core_option_None 0
#define core_option_Some 1

typedef uint8_t core_option_Option_77_tags;

/**
A monomorphic instance of core.option.Option
with types core_cmp_Ordering

*/
typedef struct core_option_Option_77_s
{
  core_option_Option_77_tags tag;
  core_cmp_Ordering f0;
}
core_option_Option_77;

extern core_option_Option_77
core_cmp_impls__core__cmp__PartialOrd_usize__for_usize__partial_cmp(size_t *x0, size_t *x1);

/**
A monomorphic instance of core.option.Option
with types size_t

*/
typedef struct core_option_Option_08_s
{
  core_option_Option_77_tags tag;
  size_t f0;
}
core_option_Option_08;

extern core_option_Option_08
core_iter_range__core__iter__range__Step_for_usize__backward_checked(size_t x0, size_t x1);

extern core_option_Option_08
core_iter_range__core__iter__range__Step_for_usize__forward_checked(size_t x0, size_t x1);

/**
A monomorphic instance of K.
with types size_t, core_option_Option size_t

*/
typedef struct tuple_04_s
{
  size_t fst;
  core_option_Option_08 snd;
}
tuple_04;

extern tuple_04
core_iter_range__core__iter__range__Step_for_usize__steps_between(size_t *x0, size_t *x1);

#define core_panicking_AssertKind_Eq 0
#define core_panicking_AssertKind_Ne 1
#define core_panicking_AssertKind_Match 2

typedef uint8_t core_panicking_AssertKind;

typedef struct nested_arrays_Key_s { uint32_t data[8U]; } nested_arrays_Key;

#define NESTED_ARRAYS_ZERO ((KRML_CLITERAL(nested_arrays_Key){ .data = { 0U, 1U, 2U, 3U, 4U, 5U, 6U, 7U } }))

/**
A monomorphic instance of Eurydice.arr
with types Eurydice_arr uint32_t[[$8size_t]]
with const generics
- $3size_t
*/
typedef struct Eurydice_arr_99_s { nested_arrays_Key data[3U]; } Eurydice_arr_99;

/**
A monomorphic instance of Eurydice.arr
with types Eurydice_arr Eurydice_arr uint32_t[[$8size_t]][[$3size_t]]
with const generics
- $3size_t
*/
typedef struct Eurydice_arr_0c_s { Eurydice_arr_99 data[3U]; } Eurydice_arr_0c;

void nested_arrays_main(void);

/**
A monomorphic instance of Eurydice.arr
with types uint8_t
with const generics
- $200size_t
*/
typedef struct Eurydice_arr_88_s { uint8_t data[200U]; } Eurydice_arr_88;

/**
A monomorphic instance of Eurydice.arr
with types Eurydice_arr uint8_t[[$200size_t]]
with const generics
- $4size_t
*/
typedef struct Eurydice_arr_70_s { Eurydice_arr_88 data[4U]; } Eurydice_arr_70;

Eurydice_arr_70 nested_arrays_test(void);

#if defined(__cplusplus)
}
#endif

#define __nested_arrays_H_DEFINED
#endif
