/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>

  F* version: <unknown>

 */

#ifndef __nested_arrays_H
#define __nested_arrays_H

#if defined(__cplusplus)
extern "C" {
#endif

#include "eurydice_glue.h"

extern size_t core_clone_impls___core__clone__Clone_for_usize__5__clone(size_t *x0);

#define core_cmp_Ordering_Less -1
#define core_cmp_Ordering_Equal 0
#define core_cmp_Ordering_Greater 1

typedef int8_t core_cmp_Ordering;

extern bool
core_cmp_impls___core__cmp__PartialEq_usize__for_usize__21__eq(size_t *x0, size_t *x1);

extern bool
core_cmp_impls___core__cmp__PartialEq_usize__for_usize__21__ne(size_t *x0, size_t *x1);

extern bool
core_cmp_impls___core__cmp__PartialOrd_usize__for_usize__58__ge(size_t *x0, size_t *x1);

extern bool
core_cmp_impls___core__cmp__PartialOrd_usize__for_usize__58__gt(size_t *x0, size_t *x1);

extern bool
core_cmp_impls___core__cmp__PartialOrd_usize__for_usize__58__le(size_t *x0, size_t *x1);

extern bool
core_cmp_impls___core__cmp__PartialOrd_usize__for_usize__58__lt(size_t *x0, size_t *x1);

#define core_option_None 0
#define core_option_Some 1

typedef uint8_t core_option_Option_77_tags;

/**
A monomorphic instance of core.option.Option
with types core_cmp_Ordering

*/
typedef struct core_option_Option_77_s
{
  core_option_Option_77_tags tag;
  core_cmp_Ordering f0;
}
core_option_Option_77;

extern core_option_Option_77
core_cmp_impls___core__cmp__PartialOrd_usize__for_usize__58__partial_cmp(
  size_t *x0,
  size_t *x1
);

extern size_t
core_iter_range___core__iter__range__Step_for_usize__43__backward(size_t x0, size_t x1);

/**
A monomorphic instance of core.option.Option
with types size_t

*/
typedef struct core_option_Option_08_s
{
  core_option_Option_77_tags tag;
  size_t f0;
}
core_option_Option_08;

extern core_option_Option_08
core_iter_range___core__iter__range__Step_for_usize__43__backward_checked(size_t x0, size_t x1);

extern size_t
core_iter_range___core__iter__range__Step_for_usize__43__backward_unchecked(
  size_t x0,
  size_t x1
);

extern size_t
core_iter_range___core__iter__range__Step_for_usize__43__forward(size_t x0, size_t x1);

extern core_option_Option_08
core_iter_range___core__iter__range__Step_for_usize__43__forward_checked(size_t x0, size_t x1);

extern size_t
core_iter_range___core__iter__range__Step_for_usize__43__forward_unchecked(
  size_t x0,
  size_t x1
);

extern core_option_Option_08
core_iter_range___core__iter__range__Step_for_usize__43__steps_between(size_t *x0, size_t *x1);

/**
A monomorphic instance of core.num.nonzero.NonZero
with types size_t

*/
typedef size_t core_num_nonzero_NonZero_08;

#define core_result_Ok 0
#define core_result_Err 1

typedef uint8_t core_result_Result_eb_tags;

/**
A monomorphic instance of core.result.Result
with types (), core_num_nonzero_NonZero size_t

*/
typedef struct core_result_Result_eb_s
{
  core_result_Result_eb_tags tag;
  core_num_nonzero_NonZero_08 f0;
}
core_result_Result_eb;

/**
A monomorphic instance of K.
with types size_t, core_option_Option size_t

*/
typedef struct tuple_04_s
{
  size_t fst;
  core_option_Option_08 snd;
}
tuple_04;

static inline core_num_nonzero_private_NonZeroUsizeInner
core_num_nonzero_private___core__clone__Clone_for_core__num__nonzero__private__NonZeroUsizeInner__26__clone(
  core_num_nonzero_private_NonZeroUsizeInner *x0
);

#define core_panicking_AssertKind_Eq 0
#define core_panicking_AssertKind_Ne 1
#define core_panicking_AssertKind_Match 2

typedef uint8_t core_panicking_AssertKind;

typedef uint32_t nested_arrays_Key[8U];

extern const uint32_t nested_arrays_ZERO[8U];

void nested_arrays_main(void);

#if defined(__cplusplus)
}
#endif

#define __nested_arrays_H_DEFINED
#endif
