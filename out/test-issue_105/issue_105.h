/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>

  F* version: <unknown>

 */

#ifndef __issue_105_H
#define __issue_105_H

#include "eurydice_glue.h"


#if defined(__cplusplus)
extern "C" {
#endif

/**
This function found in impl {core::cmp::PartialEq<()> for ()}
*/
bool core_cmp_impls_eq_cf(void **self, void **_other);

/**
This function found in impl {core::cmp::PartialEq<()> for ()}
*/
bool core_cmp_impls_ne_cf(void **self, void **_other);

/**
This function found in impl {core::cmp::PartialEq<u8> for u8}
*/
bool core_cmp_impls_eq_c3(uint8_t *self, uint8_t *other);

/**
This function found in impl {core::cmp::PartialEq<u8> for u8}
*/
bool core_cmp_impls_ne_c3(uint8_t *self, uint8_t *other);



typedef uint8_t core_convert_Infallible;

#define core_panicking_AssertKind_Eq 0
#define core_panicking_AssertKind_Ne 1
#define core_panicking_AssertKind_Match 2

typedef uint8_t core_panicking_AssertKind;

#define core_result_Ok 0
#define core_result_Err 1

typedef uint8_t core_result_Result_1d_tags;

/**
A monomorphic instance of core.result.Result
with types (), uint8_t

*/
typedef struct core_result_Result_1d_s
{
  core_result_Result_1d_tags tag;
  uint8_t f0;
}
core_result_Result_1d;

core_result_Result_1d issue_105_inner(void);

/**
A monomorphic instance of core.result.Result
with types core_convert_Infallible, uint8_t

*/
typedef struct core_result_Result_8f_s
{
  core_result_Result_1d_tags tag;
  union {
    core_convert_Infallible case_Ok;
    uint8_t case_Err;
  }
  val;
}
core_result_Result_8f;

#define core_ops_control_flow_Continue 0
#define core_ops_control_flow_Break 1

typedef uint8_t core_ops_control_flow_ControlFlow_6f_tags;

/**
A monomorphic instance of core.ops.control_flow.ControlFlow
with types core_result_Result core_convert_Infallible uint8_t, ()

*/
typedef struct core_ops_control_flow_ControlFlow_6f_s
{
  core_ops_control_flow_ControlFlow_6f_tags tag;
  core_result_Result_8f f0;
}
core_ops_control_flow_ControlFlow_6f;

/**
This function found in impl {core::ops::try_trait::Try<T, core::result::Result<core::convert::Infallible, E>[core::marker::Sized<core::convert::Infallible>, TraitClause@1]> for core::result::Result<T, E>[TraitClause@0, TraitClause@1]}
*/
/**
A monomorphic instance of core.result.branch_71
with types (), uint8_t

*/
core_ops_control_flow_ControlFlow_6f core_result_branch_71_e9(core_result_Result_1d self);

/**
 Returns the argument unchanged.
*/
/**
This function found in impl {core::convert::From<T> for T}
*/
/**
A monomorphic instance of core.convert.from_61
with types uint8_t

*/
static KRML_MUSTINLINE uint8_t core_convert_from_61_90(uint8_t t)
{
  return t;
}

/**
This function found in impl {core::ops::try_trait::FromResidual<core::result::Result<core::convert::Infallible, E>[core::marker::Sized<core::convert::Infallible>, TraitClause@1]> for core::result::Result<T, F>[TraitClause@0, TraitClause@2]}
*/
/**
A monomorphic instance of core.result.from_residual_1f
with types (), uint8_t, uint8_t
with const generics

*/
core_result_Result_1d core_result_from_residual_1f_48(core_result_Result_8f residual);

core_result_Result_1d issue_105_call_it(void);

/**
This function found in impl {core::cmp::PartialEq<core::result::Result<T, E>[TraitClause@0, TraitClause@1]> for core::result::Result<T, E>[TraitClause@0, TraitClause@1]}
*/
/**
A monomorphic instance of core.result.eq_0b
with types (), uint8_t
with const generics

*/
bool core_result_eq_0b_c6(core_result_Result_1d *self, core_result_Result_1d *other);

void issue_105_main(void);

#if defined(__cplusplus)
}
#endif

#define __issue_105_H_DEFINED
#endif
