/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>

  F* version: <unknown>

 */

#ifndef option_H
#define option_H

#include "eurydice_glue.h"


#if defined(__cplusplus)
extern "C" {
#endif

/**
A monomorphic instance of Eurydice.arr
with types uint8_t
with const generics
- $16size_t
*/
typedef struct Eurydice_arr_88_s { uint8_t data[16U]; } Eurydice_arr_88;

#define core_option_None 0
#define core_option_Some 1

typedef uint8_t core_option_Option_62_tags;

/**
A monomorphic instance of core.option.Option
with types Eurydice_arr uint8_t[[$16size_t]]

*/
typedef struct core_option_Option_62_s
{
  core_option_Option_62_tags tag;
  Eurydice_arr_88 f0;
}
core_option_Option_62;

typedef core_option_Option_62 option_S;

typedef Eurydice_arr_88 option_Val;

void option_main(void);

/**
A monomorphic instance of core.option.Option
with types  Eurydice_arr uint8_t[[$16size_t]]*

*/
typedef struct core_option_Option_18_s
{
  core_option_Option_62_tags tag;
  Eurydice_arr_88 *f0;
}
core_option_Option_18;

/**
 Converts from `&Option<T>` to `Option<&T>`.

 # Examples

 Calculates the length of an <code>Option<[String]></code> as an <code>Option<[usize]></code>
 without moving the [`String`]. The [`map`] method takes the `self` argument by value,
 consuming the original, so this technique uses `as_ref` to first take an `Option` to a
 reference to the value inside the original.

 [`map`]: Option::map
 [String]: ../../std/string/struct.String.html "String"
 [`String`]: ../../std/string/struct.String.html "String"

 ```
 let text: Option<String> = Some("Hello, world!".to_string());
 // First, cast `Option<String>` to `Option<&String>` with `as_ref`,
 // then consume *that* with `map`, leaving `text` on the stack.
 let text_length: Option<usize> = text.as_ref().map(|s| s.len());
 println!("still can print text: {text:?}");
 ```
*/
/**
This function found in impl {core::option::Option<T>[TraitClause@0]}
*/
/**
A monomorphic instance of core.option.as_ref_cd
with types Eurydice_arr uint8_t[[$16size_t]]

*/
core_option_Option_18 core_option_as_ref_cd_ca(core_option_Option_62 *self);

/**
This function found in impl {option::S}
*/
core_option_Option_18 option_option_ref_b6(core_option_Option_62 *self);

#if defined(__cplusplus)
}
#endif

#define option_H_DEFINED
#endif /* option_H */
