/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>

  F* version: <unknown>

 */

#ifndef fn_higher_order_H
#define fn_higher_order_H

#include "eurydice_glue.h"


#if defined(__cplusplus)
extern "C" {
#endif

extern int32_t core_clone_impls__core__clone__Clone_for_i32__clone(const int32_t *x0);

extern size_t core_clone_impls__core__clone__Clone_for_usize__clone(const size_t *x0);

#define core_panicking_AssertKind_Eq 0
#define core_panicking_AssertKind_Ne 1
#define core_panicking_AssertKind_Match 2

typedef uint8_t core_panicking_AssertKind;

int32_t fn_higher_order_empty_ptr(int32_t (*f)(void));

extern size_t fn_higher_order_sum_lst(size_t x0, const size_t *x1);

extern int32_t fn_higher_order_more_sum_lst(const int32_t *x0);

/**
A monomorphic instance of fn_higher_order.compose_cg_apply
with types size_t, size_t, size_t
with const generics
- N= 5
*/
size_t
fn_higher_order_compose_cg_apply_fd(
  size_t (*f)(const size_t *x0),
  size_t (*g)(size_t x0),
  const size_t *arg
);

/**
A monomorphic instance of fn_higher_order.id
with types size_t

*/
size_t fn_higher_order_id_37(size_t r);

/**
A monomorphic instance of fn_higher_order.compose_cg_apply
with types int32_t, int32_t, int32_t
with const generics
- N= 3
*/
int32_t
fn_higher_order_compose_cg_apply_82(
  int32_t (*f)(const int32_t *x0),
  int32_t (*g)(int32_t x0),
  const int32_t *arg
);

/**
A monomorphic instance of fn_higher_order.id
with types int32_t

*/
int32_t fn_higher_order_id_a8(int32_t r);

void fn_higher_order_use_compose_cg(void);

void fn_higher_order_main(void);

void fn_higher_order_unit_empty_ptr(void (*f)(void));

#if defined(__cplusplus)
}
#endif

#define fn_higher_order_H_DEFINED
#endif /* fn_higher_order_H */
