/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>

  F* version: <unknown>

 */

#ifndef __fn_higher_order_H
#define __fn_higher_order_H

#include "eurydice_glue.h"


#if defined(__cplusplus)
extern "C" {
#endif

extern int32_t core_clone_impls__core__clone__Clone_for_i32__clone(int32_t *x0);

extern size_t core_clone_impls__core__clone__Clone_for_usize__clone(size_t *x0);

#define core_cmp_Ordering_Less -1
#define core_cmp_Ordering_Equal 0
#define core_cmp_Ordering_Greater 1

typedef int8_t core_cmp_Ordering;

extern bool core_cmp_impls__core__cmp__PartialEq_usize__for_usize__eq(size_t *x0, size_t *x1);

#define core_option_None 0
#define core_option_Some 1

typedef uint8_t core_option_Option_77_tags;

/**
A monomorphic instance of core.option.Option
with types core_cmp_Ordering

*/
typedef struct core_option_Option_77_s
{
  core_option_Option_77_tags tag;
  core_cmp_Ordering f0;
}
core_option_Option_77;

extern core_option_Option_77
core_cmp_impls__core__cmp__PartialOrd_usize__for_usize__partial_cmp(size_t *x0, size_t *x1);

/**
A monomorphic instance of core.option.Option
with types size_t

*/
typedef struct core_option_Option_08_s
{
  core_option_Option_77_tags tag;
  size_t f0;
}
core_option_Option_08;

extern core_option_Option_08
core_iter_range__core__iter__range__Step_for_usize__backward_checked(size_t x0, size_t x1);

extern core_option_Option_08
core_iter_range__core__iter__range__Step_for_usize__forward_checked(size_t x0, size_t x1);

/**
A monomorphic instance of K.
with types size_t, core_option_Option size_t

*/
typedef struct tuple_04_s
{
  size_t fst;
  core_option_Option_08 snd;
}
tuple_04;

extern tuple_04
core_iter_range__core__iter__range__Step_for_usize__steps_between(size_t *x0, size_t *x1);

#define core_panicking_AssertKind_Eq 0
#define core_panicking_AssertKind_Ne 1
#define core_panicking_AssertKind_Match 2

typedef uint8_t core_panicking_AssertKind;

int32_t fn_higher_order_empty_ptr(int32_t (*f)(void));

/**
A monomorphic instance of Eurydice.arr
with types int32_t
with const generics
- $3size_t
*/
typedef struct Eurydice_arr_8d_s { int32_t data[3U]; } Eurydice_arr_8d;

int32_t fn_higher_order_more_sum_lst(Eurydice_arr_8d *l);

/**
A monomorphic instance of Eurydice.arr
with types size_t
with const generics
- $5size_t
*/
typedef struct Eurydice_arr_99_s { size_t data[5U]; } Eurydice_arr_99;

/**
A monomorphic instance of fn_higher_order.compose_cg_apply
with types size_t, size_t, size_t
with const generics
- N= 5
*/
size_t
fn_higher_order_compose_cg_apply_fd(
  size_t (*f)(Eurydice_arr_99 *x0),
  size_t (*g)(size_t x0),
  Eurydice_arr_99 *arg
);

/**
A monomorphic instance of fn_higher_order.sum_lst
with const generics
- N= 5
*/
size_t fn_higher_order_sum_lst_c9(Eurydice_arr_99 *lst);

/**
A monomorphic instance of fn_higher_order.id
with types size_t

*/
size_t fn_higher_order_id_37(size_t r);

/**
A monomorphic instance of fn_higher_order.compose_cg_apply
with types int32_t, int32_t, int32_t
with const generics
- N= 3
*/
int32_t
fn_higher_order_compose_cg_apply_82(
  int32_t (*f)(Eurydice_arr_8d *x0),
  int32_t (*g)(int32_t x0),
  Eurydice_arr_8d *arg
);

/**
A monomorphic instance of fn_higher_order.id
with types int32_t

*/
int32_t fn_higher_order_id_a8(int32_t r);

void fn_higher_order_use_compose_cg(void);

void fn_higher_order_main(void);

void fn_higher_order_unit_empty_ptr(void (*f)(void));

#if defined(__cplusplus)
}
#endif

#define __fn_higher_order_H_DEFINED
#endif
